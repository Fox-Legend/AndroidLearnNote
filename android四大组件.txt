android四大组件

1.Activity：一个Acticity是一个应用程序组件，提供一个界面（屏幕）。
   它是 android 应用程序的基本功能单元。Activity 本身是没有界面的。所以
activity类创建了一个窗口，开发人员可以通过setContentView(View)接口把UI放到
activity创建的窗口上，当activity指向全屏窗口时，activity是单独的，用于处理用户操作。
  1.1 Activity的生命周期，包括：onCreate()/onStart()/onResume()/onPause()/onStop/onDestory()
  (1) 一个Acticity的正常启动过程：onCreate创建一个Activity ――> onStart() ――> onResume()
  当Activity被kill掉时调用的方法顺序是：onPause() ――> onStop() ――> onDestory().以上为一个完整的生命周期。
  (2) 当Other applications need memory(中断)时，则是：onPause() ――> onStop()，恢复时：onStart() ――> onResume();

2.Activity之间的通信（传数据）：Intent是系统各组件之间数据传递的负载者
    Android中通过Intent对象来表示一条信息，Intent主要负责对操作的动作、动作涉及的数据、附件数据进行描述（装起来），Android则根据Intent
的描述，负责去找对对应的组件，将Intent传递给调用的组件，并完成组件之间的调用。
所以在用Intent传递信息时，Intent是作为一个“中介”作用，专门提供组件互相调用的相关信息，实现调用者和被调用者之间的解耦。
  2.1 Intent有2中形式：显式Intent和隐式Intent（说明白就是一个在代码文件中直接写出，另一个则是在xml配置文件中用action,category,intent-filter等）
  2.1.1显式Intent调用方法（有以下几种方式）
  Intent intent = new Intent(this,otherAcitvity.class);//方法1
  
  Intent intent2 = new Intent();
  intent2.setClass(this,otherAcitvity.class);//方法2
  intent2.setClassName(this,"<包名>.otherAcitvity")//方法3
  intent2.setComponent(new ComponentName(this,otherAcitvity.class);//方法4
  startActivity(intent2);//调用
  
  2.1.2 隐式Intent调用方法:在代码中只有与<action><category>中的内容同时能够匹配上Intent中指定的action和categary时，这个activity才会响应.
  <acticity>
	<intent-filter>
		<action .../>
		<category .../>
		...
	</intent-filter>
  </acticity>
  2.1.3 以上2中方式都是直接传输数据过去，但是不需要有返回数据，
  当需要将数据返回时，第一个Activity传输数据用startActivityForResult(Intent,RequestCode).跳转到下一个Activity，其中第一个参数为传入的意图对象，第二个为设置的请求码;
  跳转到第二个Activity后，调用setResult(ResultCode, intent)方法可返回上一个Activity，其中第一个参数为结果码，第二个为传入的意图对象；
  在第一个Activity通过onActivityResult()方法获得返回的数据。
	！！！注意：在setResult后，要调用finish()销毁当前的Activity，否则无法返回到原来的Activity，就无法执行原来Activity的onActivityResult函数，看到当前的Activity没反应。
3.Android用栈管理Activity
4.Activity的4种记载方式
  4.1 standard （默认模式）：就是intent将发送给新的实例，所以每次跳转都生成一个新的activity。
  4.2 singleTop :也是发送新的实例，但不同与standard，在请求的activity正好处于栈顶时，则不会创建新的实例。
  4.3 singleTask ：只创建一个实例，当Intent到来，需要创建设置为singleTask的Activity时，系统会检测栈里是否有该
					Activity的实例，若有则直接将Intent发送给它。
  4.4 singleInstance : 只创建一个实例，singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示。
  
  
  
  

